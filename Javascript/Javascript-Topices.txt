1::Variables and data types
2::Operators
3::Control structures (if/else, loops, switch)
4::Functions and functional programming
5::Arrays and objects
6::DOM manipulation and event handling
7::Asynchronous programming (callbacks, promises, async/await)
8::ES6 features (arrow functions, template literals, let/const, classes)
9::Error handling
10::Regular expressions
11::Higher-order functions
12::Closures
13::Prototypal inheritance and classes
14::Modules and namespaces
15::AJAX and APIs
16::Web storage (localStorage, sessionStorage)
17::Debugging techniques
18::Testing frameworks (Jasmine, Mocha)
19::Performance optimization
20::Security best practices.
21::Asynchronous JavaScript: In addition to callbacks, promises and async/await, advanced 
22:: such as linked lists, stacks, queues, trees, and graphs. 



||||||||||||||||||||||||||||||||||||||||||||||||||||

Types of function 

1:Function declarations

function add(x, y) {
  return x + y;
}

2::Function expressions:

const add = function(x, y) {
  return x + y;
}


3::Arrow functions: 

const add = (x, y) => x + y;


4::Immediately Invoked Function Expressions (IIFEs): 
(function() {
  console.log('Hello, world!');
})();


5::Methods: These are functions

const person = {
  name: 'John',
  greet: function() {
    console.log(`Hello, my name is ${this.name}.`);
  }
};

person.greet(); // outputs "Hello, my name is John."


7:::: here's an example of a higher-order function in JavaScript:

function multiplyBy(factor) {
  return function(x) {
    return x * factor;
  }
}

const double = multiplyBy(2);
const triple = multiplyBy(3);

console.log(double(5)); // Outputs 10
console.log(triple(5)); // Outputs 15


|||||||||||ES6||||||||||||||||||

1::Spread syntax with code

const arr1 = [1, 2, 3];
const arr2 = [4, 5, 6];

const arr3 = [...arr1, ...arr2];

console.log(arr3); // [1, 2, 3, 4, 5, 6]


function sum(a, b, c) {
  return a + b + c;
}

const nums = [1, 2, 3];

console.log(sum(...nums)); // 6


2::function sum(a, b, c) {
  return a + b + c;
}

const nums = [1, 2, 3];

console.log(sum(...nums)); // 6


2:::Rest parameters with code

function sum(...nums) {
  let total = 0;
  for (let num of nums) {
    total += num;
  }
  return total;
}

console.log(sum(1, 2, 3)); // 6
console.log(sum(4, 5, 6, 7)); // 22


function product(...nums) {
  return nums.reduce((acc, val) => acc * val, 1);
}

console.log(product(2, 3, 4)); // 24
console.log(product(5, 6, 7, 8)); // 1680


3::async/await: A syntax for writing asynchronous
function getUser(id) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      const user = { id: id, name: 'John' };
      resolve(user);
    }, 2000);
  });
}

async function printUserName(id) {
  try {
    const user = await getUser(id);
    console.log(user.name);
  } catch (error) {
    console.log('Error:', error);
  }
}

printUserName(123);

||||||||||API Fetch |||||||||||

import React, { useState, useEffect } from 'react';

function App() {
  const [data, setData] = useState(null);

  useEffect(() => {
    async function fetchData() {
      const response = await fetch('https://api.example.com/data');
      const jsonData = await response.json();
      setData(jsonData);
    }
    fetchData();
  }, []);

  if (!data) {
    return <div>Loading...</div>;
  }

  return (
    <div>
      <h1>{data.title}</h1>
      <p>{data.description}</p>
    </div>
  );
}

export default App;


||||||||||||||||||||||Certainly, here's an example of how to use the localStorage and sessionStorage Web Storage APIs in JavaScript:|||||||||||

// set an item in localStorage
localStorage.setItem('myItem', 'myValue');

// get an item from localStorage
const myValue = localStorage.getItem('myItem');

// remove an item from localStorage
localStorage.removeItem('myItem');

// set an item in sessionStorage
sessionStorage.setItem('myItem', 'myValue');

// get an item from sessionStorage
const myValue = sessionStorage.getItem('myItem');

// remove an item from sessionStorage
sessionStorage.removeItem('myItem');



// set an object in localStorage
const myObject = { name: 'John', age: 30 };
localStorage.setItem('myObject', JSON.stringify(myObject));

// get an object from localStorage
const myObjectString = localStorage.getItem('myObject');
const myObject = JSON.parse(myObjectString);

// set an item in localStorage with expiration time
const expiresAt = new Date().getTime() + 1000 * 60 * 60; // 1 hour from now
localStorage.setItem('myItem', 'myValue');
localStorage.setItem('myItem_expiresAt', expiresAt);

// check if an item in localStorage has expired
const expiresAt = localStorage.getItem('myItem_expiresAt');
if (expiresAt && new Date().getTime() > expiresAt) {
  localStorage.removeItem('myItem');
  localStorage.removeItem('myItem_expiresAt');
}

// listen for changes to localStorage
window.addEventListener('storage', function(event) {
  console.log(`Key: ${event.key}, Old Value: ${event.oldValue}, New Value: ${event.newValue}`);
});

|||||||||||||If-else||||||||||||||||

const age = 25;
const hasLicense = true;
const isDrunk = false;

if (age >= 18 && hasLicense) {
  console.log("You are allowed to drive.");
} else if (age < 18) {
  console.log("You are too young to drive.");
} else if (age >= 18 && !hasLicense) {
  console.log("You need a license to drive.");
} else if (isDrunk) {
  console.log("You cannot drive while under the influence of alcohol.");
} else {
  console.log("You are not allowed to drive for an unknown reason.");
}


1::Ternary operator with multiple conditions:

const age = 25;
const hasLicense = true;

const allowedToDrive = age >= 18 && hasLicense ? "You are allowed to drive." : "You are not allowed to drive.";
console.log(allowedToDrive);


2::const x = 10;
const y = 5;

if (x > y) {
  console.log("x is greater than y.");
} else {
  if (x < y) {
    console.log("x is less than y.");
  } else {
    console.log("x is equal to y.");
  }
}

3::Switch statement:

const day = "Monday";

switch (day) {
  case "Monday":
    console.log("Today is Monday.");
    break;
  case "Tuesday":
    console.log("Today is Tuesday.");
    break;
  case "Wednesday":
    console.log("Today is Wednesday.");
    break;
  case "Thursday":
    console.log("Today is Thursday.");
    break;
  case "Friday":
    console.log("Today is Friday.");
    break;
  default:
    console.log("Invalid day.");
}




|||express topic||||||||||

Routing: Express makes it easy to define routes for handling HTTP requests, with support for GET, POST, PUT, DELETE, and other HTTP methods.

Middleware: Express allows developers to define middleware functions that can modify the request and response objects, handle errors, or perform other tasks.

Templating: Express supports a variety of templating engines, such as EJS, Pug, and Handlebars, making it easy to render dynamic views.

Error handling: Express provides a built-in error handling middleware that can be used to catch errors and handle them in a centralized way.

Static file serving: Express provides a built-in middleware for serving static files, such as images, CSS, and JavaScript files.

RESTful APIs: Express is often used for building RESTful APIs, with support for JSON, XML, and other data formats.





