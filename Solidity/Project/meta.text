import React, { useEffect } from 'react';
import * as THREE from 'three';
import { ethers } from 'ethers';
import abi from "./ABI.json"



function Meta() {

  const scene = new THREE.Scene();
//Contract Address = 0x9647D18bFd52F007F382804910A887c580E4f083
//scene.background = new THREE.Color(0xf1ed11);
const camera = new THREE.PerspectiveCamera(
  75,
  window.innerWidth / window.innerHeight,
  0.1,
  1000
);


const renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);
const ambient_light = new THREE.AmbientLight(0x404040);
const direction_light = new THREE.DirectionalLight(0xffffff, 1);
ambient_light.add(direction_light);
scene.add(ambient_light);


const geometry_area = new THREE.BoxGeometry(100, 0.2, 50);
const material_area = new THREE.MeshPhongMaterial({ color: 0xffffff });
const area = new THREE.Mesh(geometry_area, material_area);
scene.add(area);


const geometry_cyl = new THREE.CylinderGeometry(5, 5, 20, 32);
const material_cyl = new THREE.MeshPhongMaterial({ color: 0xffff00 });
const cylinder = new THREE.Mesh(geometry_cyl, material_cyl);
scene.add(cylinder);
cylinder.position.set(20, 5, 0);

camera.position.z = 5;
camera.position.set(10, 5, 40);



renderer.render(scene, camera);


const provider = new ethers.providers.Web3Provider(window.ethereum);
const signer = provider.getSigner();
const contractAddress = '0x19af5A3cE3A7d93bd2239Ea1bDDFe3C2bb944f0c';
const contract = new ethers.Contract(contractAddress, abi, signer);


const polygon = new Promise((resolve, reject) => {
  async function meta() {
    try {
      if (typeof window.ethereum === 'undefined') {
        reject('You should install Metamask');
      }

      const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
      console.log('Connected account:', accounts[0]);

      const totalSupply = await contract.totalSupply();
      console.log('Total Supply:', totalSupply.toString());

      const maxSupply = await contract.maxSupply();
      console.log('Max Supply:', maxSupply.toString());

      const objects = await contract.getOwnerObjects();
      console.log('Your objects:', objects);

      resolve({ supply: totalSupply.toString(), nft: objects });
    } catch (error) {
      reject(error);
    }
  }

  meta();
});



const mintNFT = async () => {
  const nftName = document.querySelector("#nft_name").value;
  const nftWidth = document.querySelector("#nft_width").value;
  const nftHeight = document.querySelector("#nft_height").value;
  const nftDepth = document.querySelector("#nft_depth").value;
  const nftX = document.querySelector("#nft_x").value;
  const nftY = document.querySelector("#nft_y").value;
  const nftZ = document.querySelector("#nft_z").value;

  try {
    if (typeof window.ethereum === 'undefined') {
      throw new Error("You should install Metamask");
    }

    const provider = new ethers.providers.Web3Provider(window.ethereum);
    const signer = provider.getSigner();
    const contractAddress = '0x19af5A3cE3A7d93bd2239Ea1bDDFe3C2bb944f0c';
    const contract = new ethers.Contract(contractAddress, abi, signer);

    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
    const result = await contract.mint(nftName, nftWidth, nftHeight, nftDepth, nftX, nftY, nftZ, { value: ethers.utils.parseEther('10'), from: accounts[0] });

    console.log("NFT is minted");
    console.log(result);
  } catch (error) {
    console.error(error);
  }
};
// const button = document.querySelector("#mint");
// button.addEventListener("click", mintNFT);




polygon.then((result) => {

  console.log(result)
  result.nft.forEach((object, index) => {

    console.log("for each object" , object)
    if (index <= result.supply) {

      console.log("for each supply" , result.supply)
      const geometry_cube = new THREE.BoxGeometry(object.w, object.h, object.d);
      const material_cube = new THREE.MeshPhongMaterial({ color: 0x1be3ef });
      const nft = new THREE.Mesh(geometry_cube, material_cube);

      nft.position.set(object.x, object.y, object.z);
      scene.add(nft);
    }
  });
});



  return (
    <div>

<form onsubmit="return false">
      <div class="row g-3">
        <div class="col-sm">
          <label class="form-label">NFT name</label>
          <input class="form-control" type="text" id="nft_name" required />
        </div>

        <div class="col-sm">
          <label class="form-label">NFT width</label>
          <input class="form-control" type="number" id="nft_width" required />
        </div>

        <div class="col-sm">
          <label class="form-label">NFT height</label>
          <input class="form-control" type="number" id="nft_height" required />
        </div>

        <div class="col-sm">
          <label class="form-label">NFT depth</label>
          <input class="form-control" type="number" id="nft_depth" required />
        </div>

        <div class="col-sm">
          <label class="form-label">X position</label>
          <input class="form-control" type="number" id="nft_x" required />
        </div>

        <div class="col-sm">
          <label class="form-label">Y position</label>
          <input class="form-control" type="number" id="nft_y" required />
        </div>

        <div class="col-sm">
          <label class="form-label">Z position</label>
          <input class="form-control" type="number" id="nft_z" required />
        </div>

        <button id="mint" type="submit" onclick="mintNFT()" class="btn btn-primary">
          Create a new NFT!
        </button>
      </div>
    </form>
    </div>
  )
}

export default Meta
// export default polygon;