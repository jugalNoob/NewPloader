// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.7.0 <0.9.0;

import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol";

contract RealEstate{

using  SafeMath for uint256;


struct Property{

   uint256 price;

   address owner;

   bool forSale;

   string name;

   string description;

   string location;
}


mapping (uint256 => Property) public properties;


uint256[] public propertyIDS;


event PropertSold(uint256  propertyId);


function ListPropertySale(uint256 _propertyId , uint256 _price , string memory _name , string memory _description , string memory _location )public{

Property memory newProperty=Property({
   price:_price,
   owner:msg.sender,
   forSale:true,
   name:_name,
  description: _description,
  location:_location
});

properties[_propertyId]=newProperty;
 propertyIDS.push(_propertyId);

}



function buyProperty(uint256 _propertyId)public payable {
   Property storage property=properties[_propertyId];
   require(property.forSale, "Property is not fro sale");
   require(property.price <= msg.value , "insufficient funds");
   property.owner=msg.sender;

   property.forSale=false;

   payable (property.owner).transfer(property.price);

   emit PropertSold(_propertyId);

}

}