|||||||||||Event OEvent Organization|||||||||||||||||



//SPDX-License-Identifier: Unlicense
pragma solidity >=0.5.0 <0.9.0;


contract EventContract {
 struct Event{
   address organizer;
   string name;
   uint date; //0 1 2
   uint price;
   uint ticketCount;  //1 sec  0.5 sec
   uint ticketRemain;
 }


 mapping(uint=>Event) public events;
 mapping(address=>mapping(uint=>uint)) public tickets;
 uint public nextId;
 


 function createEvent(string memory name,uint date,uint price,uint ticketCount) external{
   require(date>block.timestamp,"You can organize event for future date");
   require(ticketCount>0,"You can organize event only if you create more than 0 tickets");


   events[nextId] = Event(msg.sender,name,date,price,ticketCount,ticketCount);
   nextId++;
 }


 function buyTicket(uint id,uint quantity) external payable{
   require(events[id].date!=0,"Event does not exist");
   require(events[id].date>block.timestamp,"Event has already occured");
   Event storage _event = events[id];
   require(msg.value==(_event.price*quantity),"Ethere is not enough");
   require(_event.ticketRemain>=quantity,"Not enough tickets");
   _event.ticketRemain-=quantity;
   tickets[msg.sender][id]+=quantity;
 }


 function transferTicket(uint id,uint quantity,address to) external{
   require(events[id].date!=0,"Event does not exist");
   require(events[id].date>block.timestamp,"Event has already occured");
   require(tickets[msg.sender][id]>=quantity,"You do not have enough tickets");
   tickets[msg.sender][id]-=quantity;
   tickets[to][id]+=quantity;
 }
}



|||||||||||||||||||||||Election ||||||||||||

contract Election {

    struct Candidate {
        string name;
        string party;
        string imageUri;
    }

    modifier candidateExists(uint256 id) {
        require(id > 0, "Candidate doesn't exist");
        require(id <= candidateCount, "Candidate doesn't exist");
        _;
    }

        mapping(uint256 => Candidate) public candidates;
        mapping(uint256 => uint256) public votes;

        uint256 public totalVotes;
        uint256 public candidateCount;
        address owner;

    constructor() {
        owner = msg.sender;
    }

    function addCandidate(string calldata name, string calldata party, string calldata imageUri) public {
        require(msg.sender == owner, "Not the owner");
        candidateCount++;
        Candidate memory person = Candidate({ name: name, party: party, imageUri: imageUri });
        candidates[candidateCount] = person;
    }

    function vote(uint256 id) public candidateExists(id) {
        votes[id]++;
        totalVotes++;
    }

}

||||||||||||||||||||||||||||||Vault||||||||||||||||||||||
// SPDX-License-Identifier: MIT

// Let's code a Vault
pragma solidity >=0.8.4; // solidity compiler version

contract Blocktrain {
    // variables

    address public owner;

    struct locker {
        uint256 value;
        uint256 time_locked;
    }
    uint counter = 0;
    mapping(uint => locker) public Vault;

    // modifier
    modifier onlyOwner() {
        require(msg.sender == owner, "Can't touch this!!");
        _;
    }

    // constructor
    constructor() {
        owner = msg.sender;
    }

    // functions

    function deposit(uint256 _time) public payable onlyOwner {
        counter += 1;
        Vault[counter].time_locked = _time;
        Vault[counter].value = msg.value;
    }

    function withdraw(uint _lockerNumber) public onlyOwner {
        require(
            block.timestamp >= Vault[_lockerNumber].time_locked,
            "Come back later !!"
        );
        payable(owner).transfer(Vault[_lockerNumber].value);
    }
}