var hash = CryptoJS.MD5("Message");

var hash = CryptoJS.SHA1("Message");

var hash = CryptoJS.SHA256("Message");
var hash = CryptoJS.SHA512("Message");
var hash = CryptoJS.SHA512("Message");
var hash = CryptoJS.SHA3("Message");

var hash = CryptoJS.SHA3("Message", { outputLength: 512 });
â€‹
var hash = CryptoJS.SHA3("Message", { outputLength: 384 });
â€‹
var hash = CryptoJS.SHA3("Message", { outputLength: 256 });
â€‹
var hash = CryptoJS.SHA3("Message", { outputLength: 224 });

var hash = CryptoJS.RIPEMD160("Message");

var hash = CryptoJS.SHA256("Message");
â€‹
hash.toString(CryptoJS.enc.Base64)
> "L3dmip37+NWEi57rSnFFypTG7ZI25Kdz9tyvpRMrL5E=";
â€‹
hash.toString(CryptoJS.enc.Hex)
> "2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91";

///Chang hash ////////!SECTION
var sha256 = CryptoJS.algo.SHA256.create();
sha256.update("Message Part 1");
sha256.update("Message Part 2");
sha256.update("Message Part 3");
â€‹
var hash = sha256.finalize();


//////////////////////////////HMAC hashing///////////////////!SECTION

var hash = CryptoJS.HmacMD5("Message", "Secret Passphrase");
var hash = CryptoJS.HmacSHA1("Message", "Secret Passphrase");
var hash = CryptoJS.HmacSHA256("Message", "Secret Passphrase");
var hash = CryptoJS.HmacSHA512("Message", "Secret Passphrase");

var hmac = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, "Secret Passphrase");
hmac.update("Message Part 1");
hmac.update("Message Part 2");
hmac.update("Message Part 3");
â€‹
var hash = hmac.finalize();

/////////////////PBKDF2 salt ////////////////!SECTION


var salt = CryptoJS.lib.WordArray.random(128 / 8);
var key128Bits = CryptoJS.PBKDF2("Secret Passphrase", salt, {
  keySize: 128 / 32
});
var key256Bits = CryptoJS.PBKDF2("Secret Passphrase", salt, {
  keySize: 256 / 32
});
var key512Bits = CryptoJS.PBKDF2("Secret Passphrase", salt, {
  keySize: 512 / 32
});
var key512Bits1000Iterations = CryptoJS.PBKDF2("Secret Passphrase", salt, {
  keySize: 512 / 32,
  iterations: 1000
});



///////////////Ciphers
The Cipher Algorithms//////////////////////////\

var encrypted = CryptoJS.AES.encrypt("Message", "Secret Passphrase");
â€‹
var decrypted = CryptoJS.AES.decrypt(encrypted, "Secret Passphrase");

//////////DES, Triple DES
DES is a previously dominant algorithm for encryption, and was published as an official Federal Information Processing Standard (FIPS). DES is now considered to be insecure due to the small key size.////!SECTION
///
var encrypted = CryptoJS.DES.encrypt("Message", "Secret Passphrase");
â€‹
var decrypted = CryptoJS.DES.decrypt(encrypted, "Secret Passphrase");


/////////////////////////Rabbit is a high-performance stream cipher and a finalist in the eSTREAM Portfolio. It is one of the four designs selected after a 3 1/2-year process where 22 designs were evaluated.////////////!SECTION
var encrypted = CryptoJS.Rabbit.encrypt("Message", "Secret Passphrase");
â€‹
var decrypted = CryptoJS.Rabbit.decrypt(encrypted, "Secret Passphrase");

////////////////Custom Key and IV///////////!SECTION

var key = CryptoJS.enc.Hex.parse("000102030405060708090a0b0c0d0e0f");
â€‹
var iv = CryptoJS.enc.Hex.parse("101112131415161718191a1b1c1d1e1f");
â€‹
var encrypted = CryptoJS.AES.encrypt("Message", key, { iv: iv });


//////////////////////!SECTION

///////////////////Encoders///////////!SECTION


var words = CryptoJS.enc.Base64.parse("SGVsbG8sIFdvcmxkIQ==");
â€‹
var base64 = CryptoJS.enc.Base64.stringify(words);
â€‹
var words = CryptoJS.enc.Latin1.parse("Hello, World!");
â€‹
var latin1 = CryptoJS.enc.Latin1.stringify(words);
â€‹
var words = CryptoJS.enc.Hex.parse("48656c6c6f2c20576f726c6421");
â€‹
var hex = CryptoJS.enc.Hex.stringify(words);
â€‹
var words = CryptoJS.enc.Utf8.parse("ð”­¢");
â€‹
var utf8 = CryptoJS.enc.Utf8.stringify(words);
â€‹
var words = CryptoJS.enc.Utf16.parse("Hello, World!");
â€‹
var utf16 = CryptoJS.enc.Utf16.stringify(words);
â€‹
var words = CryptoJS.enc.Utf16LE.parse("Hello, World!");
â€‹
var utf16 = CryptoJS.enc.Utf16LE.stringify(words);